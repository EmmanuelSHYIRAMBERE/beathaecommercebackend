Q9R8EWUBR3
BWTWZVQX2P
5J3DQSAZFW
RACASKSKWK
MXJQWDU32S
P7MSDXAEBU
8TVGB7CRNN
D5UVFR9AGJ
7GHR4ESSQH
PSJJU7FCFP

app_password: wake fhej dzvb aoxm
swa: https://smart-parking-api-3g3e.onrender.com/




const checker = (bookedTime) => {
  const now = Date.now();
  if (now >= bookedTime) {
    console.log("the booked time is-----", bookedTime);
    console.log("the now is -------------------", now);
    console.log(
      `and the desicion on-----(now >= bookedTime)-----${now >= bookedTime}`
    );
  }
};

const bookedTime = Date.parse("2024-01-08T15:31");
cron.schedule("* * * * * *", function () {
  // checker(bookedTime);
  // console.log("___________________________________________");
});

// Function to calculate the distance between two sets of coordinates using Haversine formula
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // Radius of the Earth in kilometers
  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRadians(lat1)) *
      Math.cos(toRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c; // Distance in kilometers

  return distance;
}

// Helper function to convert degrees to radians
function toRadians(degrees) {
  return degrees * (Math.PI / 180);
}

// Example usage
const coordinates1 = { latitude: 37.7749, longitude: -122.4194 }; // San Francisco, CA
const coordinates2 = { latitude: 34.0522, longitude: -118.2437 }; // Los Angeles, CA

const distance = calculateDistance(
  coordinates1.latitude,
  coordinates1.longitude,
  coordinates2.latitude,
  coordinates2.longitude
);

console.log(`Distance between the two coordinates: ${distance.toFixed(2)} km`);

/**
 * @swagger
 * /parking/buildings/getBuildingsNearByUser:
 *   get:
 *     summary: Return buildings near to the user
 *     tags: [clientAccess]
 *     responses:
 *       200:
 *          description: The success
 *          content:
 *             application/json:
 *               schema:
 *                   $ref: '#/components/schemas/updateBuildings'
 *       404:
 *          description: Not found
 *       500:
 *          description: Internal Server Error
 */


import Stripe from "stripe";
import dotenv from "dotenv";
import { catchAsyncError } from "../utility/catchSync";
import errorHandler from "../utility/errorhandler.utility";

dotenv.config();

const stripe = new Stripe(process.env.stripeSecret);

export const createCustomer = catchAsyncError(async (req, res, next) => {
  const customer = await stripe.customers.create({
    email: "customer@example.com",
    name: "customer",
  });

  if (!customer) {
    return next(new errorHandler("Failed to create customer", 400));
  }

  console.log(customer.id);

  res.status(201).json({
    success: true,
    customer,
  });
});

export const addNewCard = catchAsyncError(async (req, res) => {
  const {
    customer_id,
    card_Name,
    card_ExpYear,
    card_ExpMonth,
    card_CVC,
    card_Number,
  } = req.body;

  try {
    // Create a test token using the provided card details
    const card_token = await stripe.tokens.create({
      card: {
        name: card_Name,
        exp_year: card_ExpYear,
        exp_month: card_ExpMonth,
        cvc: card_CVC,
        number: card_Number, // Test card number
      },
    });

    console.log(card_token);

    // Use the test token to add a card to the customer
    const card = await stripe.customers.createSource(customer_id, {
      source: card_token.id,
    });

    res.status(200).send({ success: true, card: card.id });
  } catch (error) {
    console.error(error);
    res.status(500).send({ success: false, msg: error.message });
  }
});

export const createCharges = async (req, res) => {
  try {
    const createCharge = await stripe.charges.create({
      receipt_email: "tester@gmail.com",
      amount: parseInt(req.body.amount) * 100,
      currency: "INR",
      card: req.body.card_id,
      customer: req.body.customer_id,
    });

    res.status(200).send(createCharge);
  } catch (error) {
    res.status(400).send({ success: false, msg: error.message });
  }
};
